pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }

    stages {
        stage('Build App') {
            agent { label 'ubuntu-docker' }
            environment { 
                PROJECT_NAME = 'soloma70/my_web_blog' 
                AWS_SHARED_CREDENTIALS_FILE='/home/ubuntu/.aws/aws'
            }
            stages {
/* -------------------- Clean Workspase Before Job ------------------------------ */
                stage('Clean Before Slave') {
                    steps {
                        echo 'Deleting workspace'
                        deleteDir()
                    }
                }
/* --------------------------- Clone Git Repo ----------------------------- */
                stage('Clone Repo') {
                    steps{
                        git branch: 'master',
                            url: 'https://github.com/soloma70/my_site.git'        
                        }
                }
/* ---------------- Run Unit Tests after Pull Request --------------------- */
                stage('Unit Tests') {
                    steps{
                        sh '''
                            pwd
                            echo Test Models ... Passed
                            echo Test Forms .... Passed
                            echo Test Views .... Passed
                            echo Test DB ....... Passed
                        '''
                    }
                }
/* ---------------- Assembly Docker Image on Local Host --------------------- */
                stage("DckrHub Auth") {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-soloma', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh 'docker login -u $USERNAME -p $PASSWORD'
                        }
                    }
                }
                stage('Build & Push DI') {
                    steps{
                        sh '''
                        docker build -t $PROJECT_NAME:v1.${BUILD_NUMBER} .
                        docker tag $PROJECT_NAME:v1.${BUILD_NUMBER} $PROJECT_NAME:latest
                        docker tag $PROJECT_NAME:v1.${BUILD_NUMBER} $PROJECT_NAME:prev
                        docker push $PROJECT_NAME:v1.${BUILD_NUMBER}
                        docker push $PROJECT_NAME:prev
                        docker push $PROJECT_NAME:latest
                        '''
                    }
                }
                stage('Delete DI Slave') {
                    steps{
                        sh '''
                        docker rmi -f $(docker images -q $PROJECTNAME)
                        docker images
                        '''
                    }
                }
/* -------------- Copy DB, Media & Docker Compose files to S3 ----------------- */
                stage('Data > S3') {
                    steps{
                        sh '''
                        aws s3 sync db s3://soloma-webapp-blog/db --delete
                        aws s3 sync media s3://soloma-webapp-blog/media --delete
                        aws s3 sync docker s3://soloma-webapp-blog/docker --delete
                        '''
                    }
                }
/* -------------------- Clean Workspase After Job ------------------------------ */
                stage('Clean After Slave') {
                    steps {
                        echo 'Deleting workspace'
                        deleteDir()
                    }
                }
            }
        }
        
        stage('Deploy App') {
            agent { label 'ubuntu-master' }
            environment { 
                AWS_SHARED_CREDENTIALS_FILE='/var/lib/jenkins/.aws/aws'
                USER_NAME_REMOTE = 'ubuntu'
            }

            stages {
/* -------------------- Clean Workspase Before Job ------------------------------ */
                stage('Clean Before Master') {
                    steps {
                        echo 'Deleting workspace'
                        deleteDir()
                    }
                }
/* --------------- Read Remote Host IP, IDs & Region  from S3 ------------------- */
                stage('Read Host IP IDs') {
                    steps{
                        sh '''
                        aws s3 cp s3://soloma-webapp-blog/hosts/hosts hosts
                        aws s3 cp s3://soloma-webapp-blog/hosts/ids ids
                        aws s3 cp s3://soloma-webapp-blog/hosts/region region
                        '''
                    }
                }
/* --------------------- Check EC2 Instance ------------------------------------- */
                stage('EC2 Check') {
                    steps {
                        sh 'aws ec2 wait instance-status-ok --instance-ids $(cat ids | sed -n 1p) --region $(cat region | sed -n 1p)'
                    }
                }
/* ------------------ Sync DB & media S3 Bucket with Remote Host --------------- */
                stage('S3 -> Host') {
                    steps{
                        sshagent(credentials: ['aws_deploy_iaac']) {
                            sh '''
                            mkdir db
                            mkdir media
                            aws s3 sync s3://soloma-webapp-blog/db db --delete
                            aws s3 sync s3://soloma-webapp-blog/media media --delete
                            rsync -a --delete ./db/ $USER_NAME_REMOTE@$(cat hosts | sed -n 2p):./db/
                            rsync -a --delete ./media/ $USER_NAME_REMOTE@$(cat hosts | sed -n 2p):./media/
                            '''
                        }
                    }
                }
/* --------------------- Deploy Latest Docker Image & Up Web Site --------------- */               
                stage('Deploy & Up') {
                    steps{
                        sshagent(credentials: ['aws_deploy_iaac']) {
                            sh '''
                            mkdir docker
                            aws s3 sync s3://soloma-webapp-blog/docker docker --delete
                            rsync -a --delete ./docker/docker-compose.yml $USER_NAME_REMOTE@$(cat hosts | sed -n 2p):docker-compose.yml
                            ssh $USER_NAME_REMOTE@$(cat hosts | sed -n 2p) 'docker compose up -d'
                            '''
                        }
                    }
                }
/* ------------------------- Run Tests after Deploy ---------------------------- */
                stage('Job Tests') {
                    steps{
                        sshagent(credentials: ['aws_deploy_iaac']) {
                            script {
                                sh '''
                                RESP_SITE=$(curl -I http://blog-soloma70.pp.ua 2>/dev/null | head -n 1)
                                RESP_WWW=$(curl -I http://www.blog-soloma70.pp.ua 2>/dev/null | head -n 1)

                                if [ $RESP_SITE != "HTTP/1.1 200 OK" ] OR [ $RESP_WWW != "HTTP/1.1 200 OK" ] 
                                then
                                    echo 'Requires a rollback to a previous version!!!'
                                    ssh $USER_NAME_REMOTE@$(cat hosts | sed -n 2p) 'docker compose down'
                                    ssh $USER_NAME_REMOTE@$(cat hosts | sed -n 2p) 'docker rmi $(docker images -aq)'
                                    rsync -a --delete ./docker/docker-compose-prev.yml $USER_NAME_REMOTE@$(cat hosts | sed -n 2p):docker-compose.yml
                                    ssh $USER_NAME_REMOTE@$(cat hosts | sed -n 2p) 'docker compose up -d'
                                else
                                    echo 'THE NEW VERSION OF THE SITE IS INSTALLED AND READY TO GO!!!'
                                fi
                                '''
                            }
                        }
                    }
                }
/* -------------------- Clean Workspase After Job ------------------------------ */
                stage('Clean After Master') {
                    steps {
                        echo 'Deleting workspace'
                        deleteDir()
                    }
                }
            }
        }
    }
}